#!/usr/bin/perl -w
#
# (c) vir
#
# Last modified: 2013-08-06 13:56:04 +0400
#

use strict;
use warnings FATAL => 'uninitialized';
use Template;
use Pg::hstore;
use Config::General;
use DBI;
use Getopt::Std;
use Dyatel::ExtConfig;
#use Encode;

my $conf = Dyatel::ExtConfig::load();

my %opts; getopts('hd', \%opts);
if(exists $opts{'h'}) { help(); exit 0; }

eval "require Data::Dumper; import Data::Dumper;" if $opts{d};

my $myconf = $conf->{Provision};
my $dbh = Dyatel::ExtConfig::dbh;

my $tt = new Template(
	INCLUDE_PATH => $myconf->{templates},  # or list ref
	OUTPUT_PATH  => $myconf->{output},
#	INTERPOLATE  => 1,               # expand "$var" in plain text
#	POST_CHOMP   => 1,               # cleanup whitespace
#	PRE_PROCESS  => 'header',        # prefix each template
#	EVAL_PERL    => 1,               # evaluate Perl code blocks
);

my $sth = $dbh->prepare('SELECT * FROM provision');
$sth->execute();
while(my $row = $sth->fetchrow_hashref())
{
	my $user = $dbh->selectrow_hashref("SELECT * FROM users WHERE id = ?", undef, $row->{uid});
	my %params;
	%params = %{ $myconf->{Params} } if $myconf->{Params};
	%params = ( %params, hw => $row->{hw} );
	%params = ( %params, %{ Pg::hstore::decode($row->{params}) } ) if $row->{params};
	eval {
		provision($row->{devtype}, {
			params => \%params,
			user => $user,
			conf => $myconf,
		});
	};
	if($@) {
		warn "User $user->{id} \"$user->{descr}\" ERROR: $@";
	}
}

sub provision
{
	my($tpl, $vars) = @_;
	print Dumper(\@_) if $opts{d};
	my $output = '';

	my $conffn = $tpl.'.conf';
#	die "$conffn not found\n" unless -f $conffn;
	$tt->process($conffn, $vars, \$output) || die $tt->error(), "\n";

#	$output =~ s#\s+$##s;
#	print "=== $tpl.conf ===\n$output\n=== === ===\n" if $opts{d};

	my $tc = { Config::General->new( -String => $output )->getall };
	print Dumper( $tc ) if $opts{d};

	$tt->process($tc->{template}, $vars, $tc->{output}) || die $tt->error(), "\n";
}

sub help
{
	print << "***";
Usage:
	$0 [opts]
		-h --- this help
		-d --- debug mode
		-c file.conf --- use alternative conf file
***
}

