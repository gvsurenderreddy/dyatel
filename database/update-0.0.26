
-- SIP over TCP requires some parameters to be passed from registration
-- reauest into routing results.

BEGIN;

ALTER TABLE regs ADD route_params HSTORE;

DROP FUNCTION user_register(regnum TEXT, loc TEXT, exp TEXT, dev TEXT, drv TEXT, ipt TEXT, iph INET, ipp INTEGER);
CREATE OR REPLACE FUNCTION user_register(msg HSTORE) RETURNS VOID AS $$
DECLARE
	uid INTEGER;
	expint TIMESTAMP WITH TIME ZONE;
	regnum TEXT;
	loc TEXT;
	exp TEXT;
	drv TEXT;
	a TEXT[];
	rp HSTORE;
BEGIN
	regnum := msg->'username';
	loc := msg->'data';
	exp := msg->'expires';
	drv := COALESCE(msg->'driver', msg->'module');
	uid := userid(regnum);
	IF uid IS NULL THEN
		RAISE EXCEPTION 'User % not found', regnum;
	END IF;
	IF exp IS NOT NULL AND exp <> '' THEN
		expint := CURRENT_TIMESTAMP + (exp::TEXT || ' s')::INTERVAL;
	END IF;
	IF COALESCE(msg->'route_params', '') <> '' THEN
		a := ('{' || (msg->'route_params') || '}')::TEXT[];
		rp = slice(msg, a);
	END IF;

	DELETE FROM regs WHERE userid = uid AND location = loc;
	INSERT INTO regs(userid, ts, location, expires, device, driver, ip_transport, ip_host, ip_port, audio, route_params)
		VALUES (uid, CURRENT_TIMESTAMP, loc, expint, msg->'device', drv, msg->'ip_transport', (msg->'ip_host')::INET, (msg->'ip_port')::INTEGER, drv <> 'jabber', rp);
END;
$$ LANGUAGE PlPgSQL;

CREATE OR REPLACE FUNCTION regs_route_part(caller_arg TEXT, called_arg TEXT, ip_host_arg INET, formats_arg TEXT, rtp_forward_arg TEXT, res HSTORE, cntr INTEGER)
	RETURNS TABLE (vals HSTORE, newcntr INTEGER) AS $$
DECLARE
	clr RECORD;
	cld RECORD;
	t RECORD;
	kvp RECORD;
	rtpfw BOOLEAN;
BEGIN
	cld := userrec(called_arg);
	IF cld.id IS NOT NULL THEN
		clr := userrec(caller_arg);
		rtpfw := COALESCE(clr.media_bypass, FALSE) AND cld.media_bypass AND rtp_forward_arg = 'possible';

		FOR t IN SELECT * FROM regs WHERE userid = cld.id AND expires > 'now' AND audio LOOP
			cntr := cntr + 1;
			res := res || hstore('callto.' || cntr, t.location);
			res := res || hstore('callto.' || cntr || '.rtp_forward', CASE WHEN rtpfw AND ipnetwork(ip_host_arg) = ipnetwork(t.ip_host) THEN 'yes' ELSE 'no' END);
			FOR kvp IN SELECT * FROM EACH(t.route_params) LOOP
				res := res || hstore('callto.' || cntr || '.' || kvp.key, kvp.value);
			END LOOP;
		END LOOP;
	END IF;

	RETURN QUERY SELECT res, cntr;
END;
$$ LANGUAGE PlPgSQL;

COMMIT;
-- vim: ft=sql
