BEGIN;

CREATE TYPE encription_mode AS ENUM('off', 'on', 'ssl');

ALTER TABLE users ADD secure encription_mode NOT NULL DEFAULT 'ssl';

CREATE OR REPLACE FUNCTION regs_route_part(caller_arg TEXT, called_arg TEXT, ip_host_arg INET, formats_arg TEXT, rtp_forward_arg TEXT, res HSTORE, cntr INTEGER)
	RETURNS TABLE (vals HSTORE, newcntr INTEGER) AS $$
DECLARE
	clr RECORD;
	cld RECORD;
	t RECORD;
	kvp RECORD;
	rtpfw BOOLEAN;
BEGIN
	cld := userrec(called_arg);
	IF cld.id IS NOT NULL THEN
		clr := userrec(caller_arg);
		rtpfw := COALESCE(clr.media_bypass, FALSE) AND cld.media_bypass AND rtp_forward_arg = 'possible';

		FOR t IN SELECT * FROM regs WHERE userid = cld.id AND expires > 'now' AND audio LOOP
			cntr := cntr + 1;
			res := res || hstore('callto.' || cntr, t.location);
			res := res || hstore('callto.' || cntr || '.rtp_forward', CASE WHEN rtpfw AND ipnetwork(ip_host_arg) = ipnetwork(t.ip_host) THEN 'yes' ELSE 'no' END);
			FOR kvp IN SELECT * FROM EACH(t.route_params) LOOP
				res := res || hstore('callto.' || cntr || '.' || kvp.key, kvp.value);
			END LOOP;
			res := res || hstore('callto.' || cntr || '.secure', CASE WHEN (cld.secure = 'ssl' AND t.ip_transport = 'TLS') OR cld.secure = 'on' THEN 'yes' ELSE 'no' END);
		END LOOP;
	END IF;

	RETURN QUERY SELECT res, cntr;
END;
$$ LANGUAGE PlPgSQL;

COMMIT;

-- vim: ft=sql

