
BEGIN;

CREATE OR REPLACE FUNCTION route_user(msg HSTORE)
	RETURNS HSTORE AS $$
DECLARE
	res HSTORE;
	cntr INTEGER;
	t RECORD;
	uoffline BOOLEAN;
	called_arg TEXT;
BEGIN
	res := '';
	called_arg := msg->'called';
	SELECT * INTO res, cntr FROM regs_route_part(called_arg, res, 0);

	uoffline := res::TEXT = '';

	-- Add 'offline' and 'No answer' divertions
	FOR t IN SELECT normalize_num(n.val) AS val, n.timeout, k.*
			FROM morenums n INNER JOIN numkinds k ON k.id = n.numkind
			WHERE uid = userid(called_arg) AND k.callabale AND CASE WHEN uoffline THEN div_offline ELSE div_noans END ORDER BY n.sortkey, n.id LOOP
		IF res::TEXT <> '' THEN
			res := res || hstore('callto.' || cntr || '.maxcall', (t.timeout * 1000)::TEXT); -- append to previous group
			cntr := cntr + 1;
			res := res || hstore('callto.' || cntr, '|');
		END IF;
		IF t.announce IS NOT NULL THEN
			cntr := cntr + 1;
			res := res || hstore('callto.' || cntr, t.announce);
			res := res || hstore('callto.' || cntr || '.single', 'yes');
			res := res || hstore('callto.' || cntr || '.fork.ringer', 'yes');
			res := res || hstore('callto.' || cntr || '.fork.autoring', 'yes');
			res := res || hstore('callto.' || cntr || '.fork.automessage', 'call.progress');
			cntr := cntr + 1;
			res := res || hstore('callto.' || cntr, '|');
		END IF;
		cntr := cntr + 1;
		res := res || hstore('callto.' || cntr, 'lateroute/' || t.ins_prefix || t.val);
		IF t.set_local_caller THEN
			res := res || hstore('callto.' || cntr || '.caller', called_arg);
		END IF;
		IF t.set_context IS NOT NULL THEN
			res := res || hstore('callto.' || cntr || '.context', t.set_context);
		END IF;
	END LOOP;

	IF res::TEXT <> '' THEN
		res := res || 'location => fork';
		res := res || hstore(ARRAY['copyparams', 'pbxassist,dtmfpass', 'tonedetect_out', 'true', 'pbxassist', 'true', 'dtmfpass', 'false']);
	END IF;
	RETURN res;
END;
$$ LANGUAGE PlPgSQL;

CREATE OR REPLACE FUNCTION route_callgrp(msg HSTORE)
	RETURNS HSTORE AS $$
DECLARE
	g callgroups;
	res HSTORE;
	cntr INTEGER;
	cntr2 INTEGER;
BEGIN
	-- NOTE: Supported distribution schemes: parallel, linear, queue --
	SELECT * INTO g FROM callgroups WHERE num = msg->'called';
	IF NOT FOUND THEN
		RETURN ''::HSTORE;
	END IF;
	IF g.distr = 'queue' THEN
		RETURN HSTORE('location', 'queue/' || g.id::TEXT);
	END IF;

	res := 'location => fork';
	cntr := 0;

	IF LENGTH(g.ringback) > 0 THEN -- Fake ringback
		cntr := cntr + 1;
		res := res || hstore('callto.' || cntr, g.ringback);
		res := res || hstore('callto.' || cntr || '.fork.calltype', 'persistent');
		res := res || hstore('callto.' || cntr || '.fork.autoring', 'true');
		res := res || hstore('callto.' || cntr || '.fork.automessage', 'call.progress');
	END IF;

	cntr2 := cntr;
	SELECT * INTO res, cntr2 FROM callgroups_route_part(g, res, cntr2);

	IF cntr2 <> cntr THEN -- Members found
		cntr := cntr2;
		IF LENGTH(g.exitpos) > 0 THEN -- Exit position
			cntr := cntr + 1;
			IF g.maxcall > 0 THEN
				res := res || hstore('callto.' || cntr, '|exec=' || g.maxcall);
			ELSE
				res := res || hstore('callto.' || cntr, '|exec');
			END IF;
			cntr := cntr + 1;
			res := res || hstore('callto.' || cntr, 'lateroute/' || g.exitpos);
		END IF;
	ELSE -- No members found
		IF LENGTH(g.exitpos) > 0 THEN
			res := 'location => lateroute/' || g.exitpos;
		ELSE
			res := 'location => "", error => "offline"';
		END IF;
	END IF;
	RETURN res;
END;
$$ LANGUAGE PlPgSQL;

CREATE OR REPLACE FUNCTION route_master(msg HSTORE) RETURNS TABLE(field TEXT, value TEXT) AS $$
DECLARE
	cf HSTORE;
	nt TEXT;
	res HSTORE;
BEGIN
	cf := config('route');
	IF (msg->'billid') IS NOT NULL AND toBoolean(cf->'debug', FALSE) THEN
		INSERT INTO calllog(billid, tag, value, params) VALUES (msg->'billid', 'DEBUG', 'call.route', msg);
	END IF;

	SELECT numtype INTO nt FROM directory WHERE (msg->'called' = num AND NOT is_prefix)
			OR (substr(msg->'called', 1, length(num)) = num AND is_prefix);

-- RAISE NOTICE 'nt: %', nt;
	CASE nt
		WHEN 'fictive' THEN
			res := HSTORE('location', 'lateroute/'||(msg->'called'));
		WHEN 'user' THEN
			res := route_user(msg);
		WHEN 'callgrp' THEN
			res := route_callgrp(msg);
		WHEN 'abbr' THEN
			SELECT HSTORE(array_agg(rr.key), array_agg(rr.value)) INTO res FROM abbrs_route(msg) rr;
		WHEN 'switch' THEN
			SELECT HSTORE(array_agg(rr.key), array_agg(rr.value)) INTO res FROM switch_route(msg) rr;
		ELSE
			SELECT HSTORE(array_agg(rr.key), array_agg(rr.value)) INTO res FROM (
				SELECT * FROM callpickup_route(msg) UNION SELECT * FROM incoming_route(msg)
			) rr;
	END CASE;
	res := res || HSTORE('trace', concat_ws(' ', msg->'trace', msg->'called'));
	RETURN QUERY SELECT * FROM each(res);
END;
$$ LANGUAGE PlPgSQL;

DROP FUNCTION regs_route(msg HSTORE);
DROP FUNCTION callgroups_route(msg HSTORE);

COMMIT;
-- vim: ft=sql

