BEGIN;

ALTER TABLE directory ADD is_prefix BOOLEAN NOT NULL DEFAULT FALSE;
INSERT INTO numtypes (numtype, descr) VALUES ('fictive', 'Fictive number (routed elsewhere)');


CREATE OR REPLACE FUNCTION callgroups_route_part(grprec callgroups, res HSTORE, cntr INTEGER, stack TEXT[] DEFAULT '{}')
	RETURNS TABLE (vals HSTORE, newcntr INTEGER) AS $$
DECLARE
	t callgrpmembers;
	sg callgroups;
	cntr2 INTEGER;
	cntr3 INTEGER;
	nextcallto TEXT;
	x RECORD;
BEGIN
	cntr2 := cntr;
	FOR x IN SELECT m, d, cg2 AS sg FROM callgrpmembers m
			INNER JOIN directory d ON (m.num = d.num AND NOT d.is_prefix) OR (substr(m.num, 1, length(d.num)) = d.num AND d.is_prefix)
			LEFT JOIN users u ON u.num = m.num AND u.linesnum > (SELECT COUNT(*) FROM linetracker WHERE uid = u.id)
			LEFT JOIN callgroups cg2 ON cg2.num = m.num
			WHERE m.grp = grprec.id AND m.enabled AND (u.id IS NOT NULL OR cg2.id IS NOT NULL OR d.numtype = 'fictive') ORDER BY ord LOOP
		IF nextcallto IS NOT NULL AND cntr2 <> cntr THEN
			cntr2 := cntr2 + 1;
			res := res || hstore('callto.' || cntr2, nextcallto);
			nextcallto := NULL;
		END IF;
		cntr3 := cntr2;
		CASE (x.d).numtype
			WHEN 'fictive' THEN
				cntr2 := cntr2 + 1;
				res := res || hstore('callto.' || cntr2, 'lateroute/'||(x.m).num);
			WHEN 'user' THEN
				SELECT * INTO res, cntr2 FROM regs_route_part((x.m).num, res, cntr2);
			WHEN 'callgrp' THEN
				IF NOT (x.sg).num = ANY(stack) THEN
					SELECT * INTO res, cntr2 FROM callgroups_route_part(x.sg, res, cntr2, stack || (x.sg).num::TEXT);
				END IF;
--			WHEN 'abbr' THEN
--			ELSE
		END CASE;
		IF grprec.distr = 'linear' THEN
			IF cntr3 = cntr2 THEN
				res := delete(res, 'callto.' || cntr2);
				cntr2 := cntr2 - 1;
			ELSE
				nextcallto := CASE WHEN (x.m).keepring THEN '|next=' ELSE '|drop=' END || (1000 * (x.m).maxcall)::TEXT;
			END IF;
		END IF;
	END LOOP;
	RETURN QUERY SELECT res, cntr2;
END;
$$ LANGUAGE PlPgSQL;


CREATE OR REPLACE FUNCTION route_master(msg HSTORE) RETURNS TABLE(field TEXT, value TEXT) AS $$
DECLARE
	cf HSTORE;
	nt TEXT;
BEGIN
	cf := config('route');
	IF (msg->'billid') IS NOT NULL AND toBoolean(cf->'debug', FALSE) THEN
		INSERT INTO calllog(billid, tag, value, params) VALUES (msg->'billid', 'DEBUG', 'call.route', msg);
	END IF;

	SELECT numtype INTO nt FROM directory WHERE (msg->'called' = num AND NOT is_prefix)
			OR (substr(msg->'called', 1, length(num)) = num AND is_prefix);

-- RAISE NOTICE 'nt: %', nt;
	CASE nt
		WHEN 'fictive' THEN
			field := 'location';
			value := 'lateroute/'||(msg->'called');
			RETURN NEXT;
		WHEN 'user' THEN
			RETURN QUERY SELECT * FROM regs_route(msg);
		WHEN 'callgrp' THEN
			RETURN QUERY SELECT * FROM callgroups_route(msg);
		WHEN 'abbr' THEN
			RETURN QUERY SELECT * FROM abbrs_route(msg);
		ELSE
			RETURN QUERY
				SELECT * FROM callpickup_route(msg)
			UNION
				SELECT * FROM incoming_route(msg);
	END CASE;
END;
$$ LANGUAGE PlPgSQL;


COMMIT;
-- vim: ft=sql



