BEGIN;

-- Fix typo in function name
ALTER FUNCTION sceduled_mode(ts TIMESTAMP WITH TIME ZONE, tz TEXT) RENAME TO scheduled_mode;

CREATE OR REPLACE FUNCTION incoming_route(msg HSTORE) RETURNS TABLE(field TEXT, value TEXT) AS $$
DECLARE
	m TEXT;
BEGIN
	m := scheduled_mode();
	RETURN QUERY SELECT 'location'::TEXT, 'lateroute/' || route FROM incoming
		WHERE (ctx IS NULL OR ctx = msg->'context')
			AND (called IS NULL OR called = msg->'called')
			AND (mode IS NULL OR mode = m)
		ORDER BY ctx IS NULL, called IS NULL, mode IS NULL LIMIT 1;
END;
$$ LANGUAGE PlPgSQL;

-- missing indices
CREATE UNIQUE INDEX users_num_index ON users(num);

-- calls log
CREATE TABLE calllog(
	id BIGSERIAL PRIMARY KEY,
	ts TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	billid TEXT NOT NULL,
	tag TEXT,
	uid INTEGER NULL,
	value TEXT NULL,
	params HSTORE NULL
);
CREATE INDEX calllog_ts_index     ON calllog(ts);
CREATE INDEX calllog_billid_index ON calllog(billid);
CREATE INDEX calllog_tag_index    ON calllog(tag);

-- config
CREATE TABLE config (
	id SERIAL PRIMARY KEY,
	section TEXT NOT NULL,
	params HSTORE NOT NULL,
	ts TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	uid INTEGER NULL
);
CREATE UNIQUE INDEX config_section_index ON config(section);

CREATE OR REPLACE FUNCTION config(section_name TEXT) RETURNS HSTORE AS $$
	SELECT params FROM config WHERE section = $1;
$$ LANGUAGE SQL STABLE;

CREATE OR REPLACE FUNCTION toBoolean(s TEXT, def BOOLEAN DEFAULT NULL) RETURNS BOOLEAN AS $$
BEGIN
	IF LOWER(s) IN('false', 'no', 'off', 'disable', 'f') THEN
		RETURN FALSE;
	END IF;
	IF LOWER(s) IN('true', 'yes', 'on', 'enable', 't') THEN
		RETURN TRUE;
	END IF;
	RETURN def;
END;
$$ LANGUAGE PlPgSQL IMMUTABLE;

-- Adding routing debugging
CREATE OR REPLACE FUNCTION route_master(msg HSTORE) RETURNS TABLE(field TEXT, value TEXT) AS $$
DECLARE
	cf HSTORE;
BEGIN
	cf := config('route');
	IF (msg->'billid') IS NOT NULL AND toBoolean(cf->'debug', FALSE) THEN
		INSERT INTO calllog(billid, tag, value, params) VALUES (msg->'billid', 'DEBUG', 'call.route', msg);
	END IF;

	RETURN QUERY
		SELECT * FROM regs_route(msg->'caller', msg->'called', (msg->'ip_host')::INET, msg->'formats', msg->'rtp_forward')
	UNION
		SELECT * FROM callgroups_route(msg->'caller', msg->'called', (msg->'ip_host')::INET, msg->'formats', msg->'rtp_forward')
	UNION
		SELECT * FROM callpickup_route(msg->'caller', msg->'called')
	UNION
		SELECT * FROM abbrs_route(msg->'caller', msg->'called')
	UNION
		SELECT * FROM incoming_route(msg);
END;
$$ LANGUAGE PlPgSQL;

-- Fix linetracker for group calls
CREATE OR REPLACE FUNCTION linetracker_ini(msg HSTORE) RETURNS VOID AS $$
DECLARE
	u INTEGER;
BEGIN
	u := userid(msg->'external');
	IF u IS NULL AND msg->'direction' = 'outgoing' AND (msg->'calledfull') IS NOT NULL THEN
		u := userid(msg->'calledfull');
	END IF;
	IF u IS NOT NULL THEN
		INSERT INTO linetracker(uid, direction, status, chan, caller, called, billid) VALUES (u, msg->'direction', msg->'status', msg->'chan', msg->'caller', msg->'called', msg->'billid');
	END IF;
END;
$$ LANGUAGE PlPgSQL;

COMMIT;

-- vim: ft=sql


