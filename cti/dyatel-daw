#!/usr/bin/perl -w
#
# (c) vir
#
# Last modified: 2014-07-08 11:31:28 +0400
#

#!/usr/bin/perl -w
use utf8;
use strict;
use warnings FATAL => 'uninitialized';
use lib '.';

#                                                     ,-----------.    ,-^^-.
#                                                  ,-----------.  |<->/ Main \
# ,------.   ,------------.      _________      ,-----------.  |<--->(Database)
# | Yate |<->| YateHandle |====>(dataqueue)====>| Processor |<------>|\      /|
# `------'   `------------'      ^^^^^^^^^      `-----------'        |\`----'/|
#               || _________   .---------.   _________ ||             \'----'/
#               `=(ctrlqueue)=>| Control |<=(statqueue)='              `----'
#                  ^^^^^^^^^   `---------'   ^^^^^^^^^
#                               | Stats |
#                               `-------'

package Dyatel::Daw::Base;
sub print
{
	my $self = shift;
	my $pkg = ref $self;
	$pkg =~ s#.*::##;
	my $tid = threads->self()->tid();
	$pkg .= sprintf "[%02d]", $tid if $tid;
	print "$pkg: @_\n";
}

package Dyatel::Daw::Stats;
use base qw/Dyatel::Daw::Base/;

sub new
{
	my $class = shift;
	my $self = bless { @_ }, $class;
	return $self;
}

sub append
{
	my $self = shift;
	my($hr) = @_;
	foreach my $key(keys %$hr) {
		push @{$self->{$key}}, $hr->{$key};
	}
}

sub dump
{
	my $self = shift; local $_;
	my $str = '(min, avg, max)[cnt];';
	foreach my $key(sort keys %$self) {
		next if $key =~ /^_/;
		$self->limit_data($key);
		my($min, $max, $sum);
		my $cnt = @{ $self->{$key} };
		foreach(@{ $self->{$key} }) {
			$sum += $_;
			$min = $_ if !defined($min) || $_ < $min;
			$max = $_ if !defined($max) || $_ > $max;
		}
		$str .= sprintf " %s: (%.2f, %.2f, %.2f)[%d]", $key, $min, $sum / $cnt, $max, $cnt;
	}
	$self->print($str);
}

sub limit_data
{
	my $self = shift;
	my($key) = @_;
	my $cnt = @{ $self->{$key} };
	my $lmt = 20;
	if($cnt > $lmt) {
		splice @{ $self->{$key} }, 0, $cnt - $lmt;
	}
}

package Dyatel::Daw::Control;
use base qw/Dyatel::Daw::Base/;
use threads;
use threads::shared;
use Thread::Queue;

sub new
{
	my $class = shift;
	my($config, $opts) = @_;
	my $verbose:shared = delete $opts->{v};
	my $self = bless { config => shared_clone($config), opts => shared_clone($opts), verbose => $verbose, processors => { } }, $class;
	$self->{maxprocessors} = 10;
	$self->{startprocessors} = 3;
	$self->{stats} = Dyatel::Daw::Stats->new();
	return $self;
}

sub run
{
	my $self = shift; local $_;
	my $rc = 0;
	$self->{$_} = Thread::Queue->new() foreach(qw( dataqueue ctrlqueue statqueue ));
	$self->spawn_yate_handle();
	$self->spawn_processor() for(1 .. $self->{startprocessors});
	for(;;) {
		my $el = $self->{ctrlqueue}->dequeue_timed(10);
		if(not defined $el) {
			$self->periodic_check();
		} elsif($el eq 'exit' || $el eq 'finish') {
			last;
		} elsif($el eq 'spawn') {
			my $thread_count = keys %{$self->{processors}};
			if($thread_count < $self->{maxprocessors}) {
				$self->spawn_processor();
			} else {
				$self->print("Can't spawn more processors, aready spawned $thread_count");
			}
		} else {
			$self->print("Got unknown command $el");
		}
	}
	$self->stop_all_processors();
	$self->stop_yate_handle();
	return $rc;
}

sub spawn_yate_handle
{
	my $self = shift;
	my $thread = threads->create(sub {
#		require Dyatel::Daw::YateHandle;
		my $pkg = $self->{opts}{t} ? 'Dyatel::Daw::TestHandle' : 'Dyatel::Daw::YateHandle';
		my $processor = $pkg->new(
			config => $self->{config},
			ctrlqueue => $self->{ctrlqueue},
			dataqueue => $self->{dataqueue},
			verbose => $self->{verbose},
		);
		$processor->run();
	});
	$self->print("Spawned yate handle thread ".$thread->tid()) if $self->{verbose};
	$self->{yatehandle} = $thread;
}

sub spawn_processor
{
	my $self = shift;
	my $thread = threads->create(sub {
#		require Dyatel::Daw::Processor;
		my $processor = Dyatel::Daw::Processor->new(
			config =>$self->{config}{Daw},
			dataqueue => $self->{dataqueue},
			statqueue => $self->{statqueue},
			verbose => $self->{verbose},
		);
		$processor->run();
	});
	$self->print("Spawned processor thread ".$thread->tid()) if $self->{verbose};
	$self->{processors}{$thread->tid()} = $thread;
}

sub stop_all_processors
{
	my $self = shift;
	my $thread_count = keys %{$self->{processors}};
	$self->print("Shutting down $thread_count processors") if $self->{verbose};
	for(my $i = 0; $i < $thread_count; ++$i) {
		$self->{dataqueue}->enqueue('exit');
	}
	foreach my $tid(keys %{ $self->{processors} }) {
		$self->{processors}{$tid}->join();
	}
}

sub stop_yate_handle
{
	my $self = shift;
	warn "XXX unimplemented stop_yate_handle";
#	$self->{yatehandle}->join();
}

sub periodic_check
{
	my $self = shift;
	my $thread_count = keys %{$self->{processors}};
	my $queue_length = $self->{dataqueue}->pending();
	$self->print("Queue length: $queue_length, $thread_count worker threads") if $self->{verbose};
	if($queue_length > 1 && $thread_count < $self->{maxprocessors}) {
		$self->spawn_processor();
	}

	while(my $e = $self->{statqueue}->dequeue_nb()) {
		$self->{stats}->append($e) if $self->{stats};
	}
	$self->{stats}->dump() if $self->{stats};
}

our $opts = 'hvt';

sub help
{
	print << "***";
Usage: $0 [opts]
	-h		- this help
	-v		- verbose output
	-t		- Use testing data source instead of real Yate
***
}

package Dyatel::Daw::YateHandle;
use base qw/Dyatel::Daw::Base/;
use threads::shared;
use Yate v0.250;

sub new
{
	my $class = shift;
	my $self = bless { @_ }, $class;
	$self->{config} = $self->{config}->{Model}{Yate}{extmodule};
	return $self;
}

sub install_handlers
{
	my $self = shift;
	my $message = new Yate(Debug=>$self->{debug} // 0);
	$message->connect($self->{config}->{address}.':'.$self->{config}->{port}, 'global', $0);
	$message->install('call.execute', sub {
		my $msg = shift;
		$self->print("Got message ".$msg->header('name'));
		$self->enqueue_data($msg->params);
		return undef;
	}, 20);
#	$message->install("engine.status",\&on_engine_status,200);
#	$message->install("engine.debug",\&on_engine_debug,200);
	$message->listen();
	$self->{yate} = $message;
}

sub enqueue_data
{
	my $self = shift;
	my($hr) = @_;
	my $ts:shared = Time::HiRes::time();
	my $msg = shared_clone($hr);
	$msg->{TS} = $ts;
	$self->{dataqueue}->enqueue($msg);
	if($self->{dataqueue}->pending() > 1) {
		my $head = $self->{dataqueue}->peek();
		if($head && $ts - $head->{TS} > 0.5) {
			$self->{ctrlqueue}->enqueue('spawn');
		}
	}
}

sub run
{
	my $self = shift;
	$self->install_handlers;
	$self->listen();
	$self->{ctrlqueue}->enqueue('finish');
}

package Dyatel::Daw::TestHandle;
use base qw/ Dyatel::Daw::YateHandle /;
use Time::HiRes;

our %msg1 = (
#	'device' => 'YATE/5.3.1',
#	'module' => 'sip',
#	'callid' => 'sip/1125683267@192.168.1.53/688160166/',
#	'rtp_rfc2833' => '101',
	'id' => 'sip/146',
#	'transport' => 'RTP/AVP',
#	'dtmfinband' => 'no',
#	'antiloop' => '18',
	'sip_from' => 'sip:65171@192.168.1.53',
#	'sip_content-type' => 'application/sdp',
	'status' => 'incoming',
#	'sdp_raw' => "v=0\no=yate 1403674151 1403674151 IN IP4 192.168.1.53\ns=SIP Call\nc=IN IP4 192.168.1.53\nt=0 0\nm=audio 31402 RTP/AVP 8 0 2 2 101\na=rtpmap:8 PCMA/8000\na=rtpmap:0 PCMU/8000\na=rtpmap:2 G726-32/8000\na==rtpmap:2 G726-32/8000\na=rtpmap:101 telephone-event/8000\n",
#	'context' => 'route_from_internal_network',
#	'ip_host' => '192.168.1.53',
#	'sip_contact' => '<sip:65171@192.168.1.53:5060>',
##	'caller' => '65171',
##	'caller' => '+79213131113',
	'caller' => '+79218003776',
#	'oformats' => 'alaw,mulaw,slin,gsm,ilbc20,ilbc30,speex',
	'called' => '100',
#	'rtp_forward' => 'possible',
#	'rtp_addr' => '192.168.1.53',
#	'link' => 'link1',
	'answered' => 'false',
	'callername' => 'Leonid Spiridonov',
	'media' => 'yes',
	'media_video' => 'no',
	'direction' => 'incoming',
#	'sip_user-agent' => 'YATE/5.3.1',
#	'sip_uri' => 'sip:100@192.168.2.44',
#	'handlers' => 'javascript:15,regexroute:100,javascript:15,cdrbuild:50,regexroute:50,javascript:15,gvoice:20',
#	'rtp_port' => '31402',
#	'ip_transport' => 'UDP',
#	'sip_to' => '<sip:100@192.168.2.44>',
#	'formats' => 'alaw,mulaw,g726,g726',
#	'sip_allow' => 'ACK, INVITE, BYE, CANCEL, REGISTER, REFER, OPTIONS, INFO, SUBSCRIBE',
##'billid' => '1402422757-235',
	'billid' => '1390584592-666',
#	'ip_port' => '5060',
	'address' => '192.168.1.53:5060',
#	'sip_callid' => '1125683267@192.168.1.53',
	'callto' => 'sig/100'
);

sub new
{
	my $class = shift;
	my $self = bless { @_ }, $class;
	return $self;
}

sub run
{
	my $self = shift;
	while(1) {
		my $sleep = 1 + rand(5);
		sleep $sleep;
		$self->enqueue_data(\%msg1);
	}
	$self->{ctrlqueue}->enqueue('finish');
}


package Dyatel::Daw::Processor;
use base qw/Dyatel::Daw::Base/;
use DBI;
use Time::HiRes;
use Data::Dumper;
our @required_modules = qw( Dyatel::Model::DB Dyatel::Schema Template Dyatel::Model::FS::Avatars );

sub new
{
	my $class = shift; local $_;
	my $self = bless { @_ }, $class;
#	$self->{dbh} = Dyatel::ExtConfig::dbh();
	foreach(@required_modules) {
		eval "require $_" or die "Can't load $_: $@";
	}
#	print "Config: ".Dumper(Dyatel::Model::DB->config);
#	my $connect_info = Dyatel::Model::DB->config->{connect_info};
	$self->{db} = Dyatel::Model::DB->new();
	$self->{tt} = Template->new(
		INCLUDE_PATH => $self->{config}{templates},  # or list ref
		OUTPUT_PATH  => $self->{config}{output},
		ENCODING     => 'utf8',
#		INTERPOLATE  => 1,               # expand "$var" in plain text
#		POST_CHOMP   => 1,               # cleanup whitespace
#		PRE_PROCESS  => 'header',        # prefix each template
#		EVAL_PERL    => 1,               # evaluate Perl code blocks
	);
	$self->{avatars} = Dyatel::Model::FS::Avatars->new();
	return $self;
}

#sub dbh { return shift->{dbh} }
sub db { return shift->{db} }

sub run
{
	my $self = shift;
	while (my $e = $self->{dataqueue}->dequeue()) {
		my $ts = Time::HiRes::time();
#		$self->print("Popped $e off the queue: ".Dumper($e)) if $self->{verbose};
		next unless ref($e) eq 'HASH';
		next unless $self->is_our_call($e);
		if($e->{TS}) {
			$self->{statqueue}->enqueue({qdelay => $ts - $e->{TS}});
		}
		eval {
			$self->process($e);
		};
		if($@) {
			warn "Error: $@\n";
		}
		my $ts2 = Time::HiRes::time();
		$self->{statqueue}->enqueue({pdelay => $ts2 - $ts});
	}
}

sub is_our_call
{
	my $self = shift;
	my($hr) = @_;
	my $called = $hr->{called};
	return 0 unless defined $called;
	return 1 if $called =~ /^\d{3,}/;
	return 0;
}

sub process
{
	my $self = shift;
	my($e) = @_;
	my $row = $self->db->resultset('Users')->find({num => $e->{called}});
	my $uid = $row->get_column('id');
	return unless $uid;
	print "Found user id $uid\n" if $self->{verbose};
	my $inf = $self->db->xinfo($e->{caller}, { uid => $uid });
	($inf) = @$inf;

	my $template;
	if($inf and %$inf) {
		if($inf->{uid}) {
			my $a = $self->{avatars}->get($inf->{uid});
			$inf->{avatar} = $a if $a;
		}
		$template = 'intcall.tt';
	} else {
		my $rs = $self->db->resultset('Cdr')->search({
			direction => 'incoming',
			billid => { '<>', $e->{billid} },
			caller => $e->{caller},
		}, {
			'+select' => [
				{ count => '*' },
				{ date_trunc => [ "'day'", { age => { min => 'ts' } } ] },
				{ age => { max => 'ts' } },
				{ max => 'ts' },
			],
			'+as' => [qw/ callcount minage maxage maxts /],
			columns => [ ],
		});
		$rs->result_class('DBIx::Class::ResultClass::HashRefInflator');
		$inf = $rs->single;
		$template = 'extcall.tt';
	}

	my $output = '';
	my $vars = {
		info => $inf,
		event => $e,
	};
	print "template '$template' parameters: ".Dumper($vars) if $self->{verbose};
	$self->{tt}->process($template, $vars, \$output)
		or die $self->{tt}->error(), "\n";

	print "Rendered template $template: $output\n";

	$self->db->resultset('Calllog')->create({
		billid => $e->{billid},
		tag => 'CALLER',
		value => $output,
		params => $inf,
	});

	sleep(3 + rand(20));
}

package main;
use Getopt::Std;

binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

my %opts; getopts($Dyatel::Daw::Control::opts, \%opts);
if(exists $opts{'h'}) { Dyatel::Daw::Control::help(); exit 0; }

$|=1;

eval "require Dyatel::ExtConfig;" or die $@;
my $conf = Dyatel::ExtConfig::load();
my $process = new Dyatel::Daw::Control($conf, \%opts);
exit $process->run();


