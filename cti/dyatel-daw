#!/usr/bin/perl -w
#
# (c) vir
#
# Last modified: 2014-07-08 11:31:28 +0400
#

#!/usr/bin/perl -w
use utf8;
use strict;
use warnings FATAL => 'uninitialized';
use lib '.';

#                                                     ,-----------.    ,-^^-.
#                                                  ,-----------.  |<->/ Main \
# ,------.   ,------------.      _________      ,-----------.  |<--->(Database)
# | Yate |<->| YateHandle |====>(dataqueue)====>| Processor |<------>|\      /|
# `------'   `------------'      ^^^^^^^^^      `-----------'        |\`----'/|
#               || _________   .---------.   _________ ||             \'----'/
#               `=(ctrlqueue)=>| Control |<=(statqueue)='              `----'
#                  ^^^^^^^^^   `---------'   ^^^^^^^^^
#                               | Stats |
#                               `-------'

package Dyatel::Daw::Base;
use MCE;
sub print
{
	my $self = shift;
	my $pkg = ref $self;
	$pkg =~ s#.*::##;
	MCE->sendto("STDOUT", "$pkg: @_\n");
}

package Dyatel::Daw::YateHandle;
use base qw/Dyatel::Daw::Base/;
use Yate v0.250;
use constant SEEN_TIMEOUT => 30;

sub new
{
	my $class = shift;
	my($config, $queue) = @_;
	my $self = bless { config => $config->{Model}{Yate}{extmodule}, dataqueue => $queue }, $class;
	return $self;
}

sub install_handlers
{
	my $self = shift;
	my $y = new Yate(Debug=>$self->{debug} // 0);
	$y ->connect($self->{config}->{address}.':'.$self->{config}->{port}, 'global', $0);
	$y->setlocal('nonblocking', 'true');
	$y->install('call.execute', sub {
		my $msg = shift;
		$self->print("Got message ".$msg->header('name'));
		unless($msg->param('billid')) {
			$self->print('No billid');
			return undef;
		}
		# key includes called number as different users can have different phonebooks
		my $key = ($msg->param('billid')//'x').'-'.($msg->param('caller')//'x').'-'.($msg->param('called')//'x');
		if($self->{seen_h}{$key} && (time() - $self->{seen_h}{$key} < SEEN_TIMEOUT)) {
			$self->print("key $key already known for ",  time() - $self->{seen_h}{ $self->{seen_q}[0] }, " seconds");
			return undef;
		}
		$self->{seen_h}{$key} = time();
		push @{ $self->{seen_q} }, $key;
		$self->enqueue_data($msg->params);
		while(time() - $self->{seen_h}{ $self->{seen_q}[0] } >= SEEN_TIMEOUT) {
			delete $self->{seen_h}{ shift @{$self->{seen_q}} };
		}
		return undef;
	}, 20);
	$y->listen();
	$self->{yate} = $y;
}

sub enqueue_data
{
	my $self = shift;
	my($hr) = @_;
	my $ts = Time::HiRes::time();
	my $msg = { %$hr };
	delete $msg->{handlers};
	$msg->{TS} = $ts;
	$self->{dataqueue}->enqueue($msg);
	if($self->{dataqueue}->pending() > 1) {
		my $head = $self->{dataqueue}->peek();
		if($head && $ts - $head->{TS} > 0.5) {
#			$self->{ctrlqueue}->enqueue('spawn');
			warn "TOPMO3uM!";
		}
	}
}

sub run
{
	my $self = shift;
	$self->install_handlers;
	$self->listen();
#	$self->{ctrlqueue}->enqueue('finish');
}

package Dyatel::Daw::TestHandle;
use base qw/ Dyatel::Daw::YateHandle /;
use Time::HiRes;

our %msg1 = (
#	'device' => 'YATE/5.3.1',
#	'module' => 'sip',
#	'callid' => 'sip/1125683267@192.168.1.53/688160166/',
#	'rtp_rfc2833' => '101',
	'id' => 'sip/146',
#	'transport' => 'RTP/AVP',
#	'dtmfinband' => 'no',
#	'antiloop' => '18',
	'sip_from' => 'sip:65171@192.168.1.53',
#	'sip_content-type' => 'application/sdp',
	'status' => 'incoming',
#	'sdp_raw' => "v=0\no=yate 1403674151 1403674151 IN IP4 192.168.1.53\ns=SIP Call\nc=IN IP4 192.168.1.53\nt=0 0\nm=audio 31402 RTP/AVP 8 0 2 2 101\na=rtpmap:8 PCMA/8000\na=rtpmap:0 PCMU/8000\na=rtpmap:2 G726-32/8000\na==rtpmap:2 G726-32/8000\na=rtpmap:101 telephone-event/8000\n",
#	'context' => 'route_from_internal_network',
#	'ip_host' => '192.168.1.53',
#	'sip_contact' => '<sip:65171@192.168.1.53:5060>',
##	'caller' => '65171',
##	'caller' => '+79213131113',
	'caller' => '+79218003776',
#	'oformats' => 'alaw,mulaw,slin,gsm,ilbc20,ilbc30,speex',
	'called' => '100',
#	'rtp_forward' => 'possible',
#	'rtp_addr' => '192.168.1.53',
#	'link' => 'link1',
	'answered' => 'false',
	'callername' => 'Leonid Spiridonov',
	'media' => 'yes',
	'media_video' => 'no',
	'direction' => 'incoming',
#	'sip_user-agent' => 'YATE/5.3.1',
#	'sip_uri' => 'sip:100@192.168.2.44',
#	'handlers' => 'javascript:15,regexroute:100,javascript:15,cdrbuild:50,regexroute:50,javascript:15,gvoice:20',
#	'rtp_port' => '31402',
#	'ip_transport' => 'UDP',
#	'sip_to' => '<sip:100@192.168.2.44>',
#	'formats' => 'alaw,mulaw,g726,g726',
#	'sip_allow' => 'ACK, INVITE, BYE, CANCEL, REGISTER, REFER, OPTIONS, INFO, SUBSCRIBE',
##'billid' => '1402422757-235',
	'billid' => '1390584592-666',
#	'ip_port' => '5060',
	'address' => '192.168.1.53:5060',
#	'sip_callid' => '1125683267@192.168.1.53',
	'callto' => 'sig/100'
);

# Regexp for yate log reformatting:
#   s/^[ \t]*param\[\(.*\)\] = \(.*\)/\t\1 => \2,/
our %msg2 = (
	'id' => 'sig/262',
#	'billid' => '1405053902-1215',
	'billid' => '1390584592-666',
	'caller' => '177',
	'callername' => 'Vladimir Shishko',
#	'called' => '216',
	'called' => '100',
	'calledname' => '',
	'diverter' => '212',
	'divertername' => 'Elena Elistratova',
	'reason' => 'transfer',
#	'sip_referred-by' => '"Elena Elistratova" <sip:212@192.168.1.53>',
#	'sip_contact' => '"Elena Elistratova" <sip:212@192.168.50.53:5060>',
#	'sip_refer-to' => '<sip:216@192.168.1.53>',
#	'sip_user-agent' => 'Cisco/SPA504G-7.5.5',
	'handlers' => 'javascript:15,cdrbuild:50,regexroute:50,register:90',
#	'dtmfpass' => 'false',
	'callto.1.secure' => 'no',
	'callto.2' => '|',
	'callto.1.rtp_forward' => 'no',
	'callto.3' => 'lateroute/5015',
	'callto.1.maxcall' => '17000',
	'callto.1.oconnection_id' => 'general',
	'callto.1' => 'sip/sip:216@192.168.50.54:5060',
	'callto' => 'fork',

);

our %msg3 = (
	'status' => 'incoming',
	'callerscreening' => 'network-provided',
	'billid' => '1418793742-4221',
	'formats' => 'alaw,slin,mulaw,gsm,ilbc20,ilbc30,g729,speex,g723',
	'direction' => 'incoming',
	'callednumtype' => 'unknown',
	'callername' => '',
	'context' => 'from_outside',
	'caller' => '+79213131113',
	'address' => 'trunk1/8',
	'id' => 'sig/979',
	'callernumplan' => 'isdn',
	'module' => 'sig',
	'called' => '3259747',
	'callerpres' => 'allowed',
	'callednumplan' => 'isdn',
	'callto' => 'lateroute/871',
	'overlapped' => 'false',
	'format' => 'alaw',
	'callernumtype' => 'national',
	'answered' => 'false'
);

our @msgs = (
	\%msg1,
	\%msg2,
	\%msg3,
);

sub run
{
	my $self = shift;
	while(1) {
		my $sleep = 2 + rand(5);
		sleep $sleep;
		my $msg = $msgs[rand(@msgs)];
		$self->enqueue_data($msg);
	}
#	$self->{ctrlqueue}->enqueue('finish');
}


package Dyatel::Daw::Processor;
use base qw/Dyatel::Daw::Base/;
use DBI;
use Time::HiRes;
use Data::Dumper;
our @required_modules = qw( Dyatel::Model::DB Dyatel::Schema Template Dyatel::Model::FS::Avatars );

sub new
{
	my $class = shift; local $_;
	my($config, $queue) = @_;
	my $self = bless { config => $config->{Daw}, dataqueue => $queue }, $class;
	foreach(@required_modules) {
		eval "require $_" or die "Can't load $_: $@";
	}
	$self->{db} = Dyatel::Model::DB->new();
	$self->{tt} = Template->new(
		INCLUDE_PATH => $self->{config}{templates},  # or list ref
		OUTPUT_PATH  => $self->{config}{output},
		ENCODING     => 'utf8',
#		INTERPOLATE  => 1,               # expand "$var" in plain text
#		POST_CHOMP   => 1,               # cleanup whitespace
#		PRE_PROCESS  => 'header',        # prefix each template
#		EVAL_PERL    => 1,               # evaluate Perl code blocks
	);
	$self->{avatars} = Dyatel::Model::FS::Avatars->new();
	return $self;
}

#sub dbh { return shift->{dbh} }
sub db { return shift->{db} }

sub run
{
	my $self = shift;
	while (my $e = $self->{dataqueue}->dequeue()) {
		my $ts = Time::HiRes::time();
		$self->print("Popped off the queue: ".Dumper($e)) if $self->{verbose};
		next unless ref($e) eq 'HASH';
		next unless $self->is_our_call($e);
		if($e->{TS}) {
#			$self->{statqueue}->enqueue({qdelay => $ts - $e->{TS}});
		}
		eval {
			$self->process($e);
		};
		if($@) {
			warn "Error: $@\n";
		}
		my $ts2 = Time::HiRes::time();
#		$self->{statqueue}->enqueue({pdelay => $ts2 - $ts});
	}
}

sub is_our_call
{
	my $self = shift;
	my($hr) = @_;
	my $called = $hr->{called};
	return 0 unless defined $called;
	return 1 if $called =~ /^\d{3,}/;
	return 0;
}

sub process
{
	my $self = shift;
	my($e) = @_;
	my($template, $tag, $inf);
	if(my $row = $self->db->resultset('Users')->find({num => $e->{called}})) {
		my $uid = $row->get_column('id');
		$self->print("Found user id $uid\n") if $self->{verbose};
		if($e->{reason} && $e->{reason} eq 'transfer') {
			($inf) = @{ $self->db->xinfo($e->{diverter}, { uid => $uid }) };
			$template = 'transfer.tt';
			$tag = 'DIVERTION';
		} else {
			($inf) = @{ $self->db->xinfo($e->{caller}, { uid => $uid }) };
		}
		if($inf->{uid}) {
			my $a = $self->{avatars}->get($inf->{uid});
			$inf->{avatar} = $a if $a;
		}
		$template = 'intcall.tt';
	}

	$tag ||= 'CALLER';

	unless($inf) {
		my $rs = $self->db->resultset('Cdr')->search({
			direction => 'incoming',
			billid => { '<>', $e->{billid} },
			caller => $e->{caller},
		}, {
			'+select' => [
				{ count => '*' },
				{ date_trunc => [ "'day'", { age => { min => 'ts' } } ] },
				{ age => { max => 'ts' } },
				{ max => 'ts' },
			],
			'+as' => [qw/ callcount minage maxage maxts /],
			columns => [ ],
		});
		$rs->result_class('DBIx::Class::ResultClass::HashRefInflator');
		$inf = $rs->single;
		$template = 'extcall.tt';
	}

	my $output = '';
	my $vars = {
		info => $inf,
		event => $e,
	};
	$self->print("template '$template' parameters: ".Dumper($vars)) if $self->{verbose};
	$self->{tt}->process($template, $vars, \$output)
		or die $self->{tt}->error(), "\n";

	$self->print("Rendered template $template: $output\n") if $self->{verbose};

	$self->db->resultset('Calllog')->search({
		billid => $e->{billid},
		tag => $tag,
	})->delete;
	$self->db->resultset('Calllog')->create({
		billid => $e->{billid},
		tag => $tag,
		value => $output,
		params => $inf,
	});
}

package main;
use strict;
use warnings FATAL => 'uninitialized';
use MCE;
use MCE::Queue;
use Getopt::Std;

binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

sub help
{
	print << "***";
Usage: $0 [opts]
	-h		- this help
	-v		- verbose output
	-t		- Use testing data source instead of real Yate
***
}

my %opts; getopts('hvt', \%opts);
if(exists $opts{'h'}) { help(); exit 0; }

$|=1;

eval "require Dyatel::ExtConfig;" or die $@;
my $conf = Dyatel::ExtConfig::load();

my $q = MCE::Queue->new;

sub task1
{
	my($mce) = @_;
	my $h = $opts{t}
		? Dyatel::Daw::TestHandle->new($conf, $q)
		: Dyatel::Daw::YateHandle->new($conf, $q);
	$h->run();
}

sub task2
{
	my($mce) = @_;
	my $arg = $mce->user_args();
	my $p = Dyatel::Daw::Processor->new($conf, $q);
	$p->run();
}

my $mce = MCE->new(
	user_tasks => [{
		task_name   => 'reader',
		max_workers => 1,
		user_func   => \&task1,
		use_threads => 0
	},{
		task_name   => 'processor',
		max_workers => $conf->{Daw}{Workers} || 4,
		user_func   => \&task2,
		use_threads => 0,
		user_args => [ qw/ one two three / ]
	}],
	task_end   => sub {
		my($mce, $task_id, $task_name) = @_;
		MCE->sendto("STDOUT", "Task [$task_id -- $task_name] completed processing\n");
	},
	user_begin => sub {
		my($mce, $task_id, $task_name) = @_;
		$0 =~ s#.*/##;
		$0 .= '-'.$task_name if $task_name;
	},
	on_post_exit => sub {
		my($self, $e) = @_;
		MCE->sendto("STDOUT", "$e->{wid}: $e->{pid}: status $e->{status}: $e->{msg}");
		$self->restart_worker($e->{wid});
	},
);

MCE->run();




