#!/usr/bin/perl
#
package Yate::IVR::FSM;
use utf8;
use strict;
use warnings;
use Carp;
use DBI;

sub new
{
	my $class = shift;
	my($table, $start) = @_;
	croak "Usage: Yate::IVR::FSM-new([ [ 'state1', 'event1', 'action', 'next_state' ], ... ])" unless(ref($table) eq 'ARRAY');
	$start //= 'start';
	my $self = bless { fsm_table => $table }, ref($class)||$class;
	$self->set_state($start);
	return $self;
}

sub event
{
	my $self = shift;
	my($ev) = @_;
	$self->debug('State: '.$self->{fsm_state}.' Event: '.$ev);
	my $a = $self->{fsm_curstate}{$ev};
	unless($a) { # Two more catch-all events: 'default' and 'dtmf'
		if($ev =~ /^dtmf_(.*)/ && $self->{fsm_curstate}{dtmf}) {
			$self->{lastdtmf} = $1;
			$a = $self->{fsm_curstate}{dtmf};
		} elsif($ev ne 'enter') {
			$a = $self->{fsm_curstate}{default};
		}
		return undef unless $a;
	}
	my($action, $next_state) = @$a;
	my $r;
	if($action && ref($action) && ref($action) eq 'ARRAY') {
		$self->debug("Action: ".join('|', @$action)." Next state: ".($next_state//'nothing'));
		local $_;
		$r ||= $self->action($_) foreach(@$action);
	} else {
		$self->debug("`--> Action: ".($action//'nothing')." Next state: ".($next_state//'nothing'));
		$r = $self->action($action) if defined $action;
	}
	if($next_state && $next_state ne $self->{fsm_state}) {
		$self->set_state($next_state);
		$self->event('enter');
	}
	if(my $next_event = shift @{ $self->{fsm_eventqueue} }) {
		return $self->event($next_event);
	}
	return $r;
}

sub enqueue_event
{
	my $self = shift;
	my($ev) = @_;
	push @{ $self->{fsm_eventqueue} }, $ev;
}

sub action
{
	my $self = shift;
	warn ref($self)."::action(@_)";
}

sub set_state
{
	my $self = shift;
	my($state) = @_;
	my $c = $self ->{fsm_curstate} = { };
	foreach my $row(@{ $self->{fsm_table} })
	{
		next if defined($row->[0]) && $row->[0] ne $state;
		$c->{$row->[1]} = [ $row->[2], $row->[3] ];
	}
	carp "Empty state $state" unless keys %$c;
	$self->{fsm_state} = $state;
}

package Yate::IVR::Call;
use strict;
use warnings;
use base qw/ Yate::IVR::FSM /;
use vars qw( %registry %responses );
use constant COPYPARAMS => qw/ id caller called billid format formats answered /;

sub new
{
	my $class = shift;
	my($msg, $name, $ivr) = @_;
	my $id = $msg->param('id');
	my $self = $class->Yate::IVR::FSM::new($ivr->table);
	$self->{yate} = $msg;
	$self->{name} = $name;
	$self->{IVR} = $ivr;
	$self->{numvalidator} = $ivr->{numvalidator};
	foreach my $k(COPYPARAMS) {
		$self->{$k} = $msg->param($k);
	}
	$self->{formats} = $self->{format} unless $self->{formats};
	warn "Channel id $id already in registry" if $registry{$id};
	$registry{$id} = $self;
#	$self->debug("New call from ".$self->{caller});
	return $self;
}

sub status
{
	my $self = shift;
	return {
		name => $self->{name},
		caller => $self->{caller},
		id => $self->{id},
		state => $self->{fsm_state},
	};
}

sub yate { return shift->{yate}; }

sub find
{
	shift eq __PACKAGE__ or die;
	my($msg) = @_;
	foreach my $k(qw( id targetid )) {
		my $id = $msg->param($k);
		next unless $id;
		return $registry{$id} if $registry{$id};
		if($id =~ /^(fork\/\d+)/) {
			return $registry{$1} if $registry{$1};
		}
	}
	return undef;
}

sub debug
{
	my $self = shift;
	print $self->{name}.' '.$self->{id}.": @_\n";
}

sub dump
{
	my $self = shift;
	my $t = '';
	foreach my $k(keys %$self) {
		$t .= ', ' if length $t;
		$t .= "$k => ".(defined($self->{$k}) ? $self->{$k} : '(undef)');
	}
	return $t;
}

sub set_dumb
{
	my $self = shift;
	my($msg) = @_;
	my $dumb = $msg->param('targetid'); # or peerid?
	return undef unless $dumb =~ /^dumb\//;
	$self->{dumb} = $dumb;
	$registry{$dumb} = $self;
	$self->debug("New call from $self->{caller} to $self->{called} ($self->{id} to $self->{dumb})");
	$self->event('enter');
}

sub set_slave
{
	my $self = shift;
	my($msg) = @_;
	return $self->event('hangup') unless $msg->param('targetid');
	$self->{slavedumb} = $msg->param('id');
	$self->{destinationid} = $msg->param('targetid');
	$registry{$self->{destinationid}} = $self;
	$registry{$self->{slavedumb}} = $self;
}

# === === === Message handlers === === ===

sub disconnected
{
	my $self = shift;
	my($msg) = @_;
	return if $msg->param('id') =~ /^dumb/; # skip slave channels disconnection
	$self->debug("Channel ".$msg->param('id')." disconnected");
#	$self->event('disconnect');
	if($msg->param('id') eq $self->{id}) { # our main channel has gone
		$self->destruct;
	} elsif($self->{slavedumb}) {
		my $t = $msg->param('targetid');
		if($t eq $self->{id} || $t eq $self->{slavedumb}
#				|| ($t =~ /^(fork\/\d+)/ && $self->{destinationid} eq $1)
				|| $t eq $self->{destinationid}
		) {
			$self->debug("Slave hung up");
			$self->event('hangup');
		} else {
			$self->debug("Something hung up");
			$msg->dumpmsg("Something hung up");
		}
	} else {
		$self->debug("Something hung up");
		$msg->dumpmsg("Something hung up");
	}
}

sub dtmf
{
	my $self = shift;
	my($msg) = @_;
	foreach my $digit(split(//, $msg->param('text'))) {
		$digit = 'star' if $digit eq '*';
		$digit = 'hash' if $digit eq '#';
		$self->event('dtmf_'.$digit) 
	}
}

sub notify
{
	my $self = shift;
	$self->event('finished');
}

sub ringing
{
	my $self = shift;
#shift->dumpmsg("$self ringing");
	$self->event('ringing');
}

sub answered
{
	my $self = shift;
	my($msg) = @_;
#shift->dumpmsg("$self answered");
	if($self->{destinationid} && $self->{destinationid} =~ /^fork\//) {
		$self->{wait_replace} = sub { shift->event('answered') }; # delay event until real channel is known
	} elsif($msg->param('targetid') eq $self->{id}) {
		# just ignore it
	} else {
		$self->event('answered');
	}
}

sub replace_chan
{
	my $self = shift;
	my($msg) = @_;
#$msg->dumpmsg("$self replace_chan");
	my $obj = delete $registry{$msg->param('id')};
	warn "Wrong object in chan.replace handler" unless $obj == $self;
	$registry{$msg->param('newid')} = $obj;
	foreach my $k(qw( id targetid dumb slavedumb destinationid )) {
		my $newid = $msg->param('newid');
		if($obj->{$k} && $obj->{$k} eq $msg->param('id')) {
			if($k =~ /dumb$/ and $newid !~/^dumb\//) {
# Just do nothing here
#				$self->debug("Removing replaced '$k': '$obj->{$k}' => '$newid'");
#				delete $obj->{$k};
			} else {
				$self->debug("Replaced '$k': '$obj->{$k}' => '$newid'");
				delete $registry{$obj->{$k}};
				$obj->{$k} = $newid;
				$registry{$newid} = $self;
			}
		}
	}
	if($self->{wait_replace}) {
		$self->{wait_replace}->($self); # delayed event
		delete $self->{wait_replace};
	}
}

sub timer
{
	my $self = shift;
	if(defined $self->{timer}) {
		if(0 >= int(--$self->{timer})) {
			delete $self->{timer};
			$self->event('timeout');
		}
	}
}

sub connected
{
	my $self = shift;
	my($msg) = @_;
#	if($msg->header('processed')) {
#		delete $self->{id};
#		delete $self->{destinationid};
#	}
	$self->event('connected');
}

use Data::Dumper;
sub destruct
{
	my $self = shift;
	foreach my $k(qw( id targetid dumb destinationid slavedumb )) {
		delete $registry{$self->{$k}} if $self->{$k} && $registry{$self->{$k}} && $registry{$self->{$k}} eq $self;
	}
	foreach my $k(keys %responses) {
		if($responses{$k} == $self) {
			delete $responses{$k};
			last;
		}
	}
	foreach my $k(qw( dumb slavedumb )) {
		if($self->{$k}) {
			$self->yate->message('call.drop', undef, undef,
				id      => $self->{$k},
				reason  => "IVR $self->{name} termination",
			);
		}
	}
	$self->dump("Final dump");
	print "registry: ".Dumper(\%registry);
	print "responses: ".Dumper(\%responses);
}

# === === === Actions === === ===

sub action
{
	my $self = shift;
	my($action) = @_;
	if(ref($action)) {
		die "Wrong action $action" unless ref($action) eq 'CODE';
		return &$action;
	}
	my($sub, $arg) = split(/\s+/, $action, 2);
	$arg //= '';
	eval "\$self->action_$sub('$arg')";
	die "Action $action failed: $@" if $@;
}

sub action_answer
{
	my $self = shift;
	return if defined($self->{answered}) && $self->{answered} ne 'false';
	$self->yate->message('call.answered', undef, undef,
		id => $self->{dumb},
		targetid => $self->{id},
	);
	$self->{answered} = 1;
}

sub action_playtone
{
	my $self = shift;
	my($tone) = @_;
	$tone //= 'dial';
	$self->yate->message('chan.masquerade', undef, undef,
		message => "chan.attach",
		id      => $self->{dumb},
		source  => "tone/$tone",
	);
}

sub action_playfile
{
	my $self = shift;
	my($file) = @_;
	die "action_playfile: filename required" unless $file;
	$self->yate->message('chan.masquerade', undef, undef,
		message => "chan.attach",
		id      => $self->{dumb},
		source  => "wave/play/$file",
		notify  => $self->{dumb},
	);
}

sub action_switch
{
	my $self = shift;
	my($num) = @_;
	$num = $self->{collected} unless defined($num) && length($num);
	$self->debug("Switching call to $num");
	$self->yate->message('chan.masquerade', undef, undef,
		map({ $_ => $self->{$_} } COPYPARAMS),
		message => 'call.execute',
		callto => 'lateroute/'.$num,
		called => $num,
	);
	$self->destruct;
}

sub action_switch2
{
	my $self = shift;
	my($num) = @_;
	$num = $self->{collected} unless defined($num) && length($num);
	$self->debug("Switching call to $num");
	$self->yate->message('chan.masquerade', undef, undef,
		map({ $_ => $self->{$_} } COPYPARAMS),
		message => 'call.execute',
		callto => 'fork',
		'callto.1' => 'tone/ring',
		'callto.1.fork.calltype' => 'persistent',
		'callto.1.fork.autoring' => 'true',
		'callto.1.fork.automessage' => 'call.progress',
		'callto.2' => 'lateroute/'.$num,
		called => $num,
	);
	$self->destruct;
}

sub action_flush
{
	my $self = shift;
	$self->{collected} = '';
}

sub action_collect
{
	my $self = shift;
	my($digit) = @_;
	$digit = delete $self->{lastdtmf} unless defined($digit) && length($digit);
	$self->{collected} .= $digit;
	$self->debug("Collected: $self->{collected}");
}

sub action_timer
{
	my $self = shift;
	my($seconds) = @_;
	$self->{timer} = 0+$seconds;
	delete $self->{timer} unless $self->{timer}; # allow timer deletion
}

sub action_originate
{
	my $self = shift;
	my($num) = @_;
	$num = $self->{collected} unless defined($num) && length($num);
	my $msgid = $self->yate->generate_id;
	$responses{$msgid} = $self;
	$self->debug("Originating call to $num");
	$self->yate->message('call.execute', undef, $msgid,
		caller => $self->{caller},
		billid => $self->{billid},
		callto => 'dumb/',
		target => $num,
		format => $self->{format},
		formats => $self->{formats},
		copyparams => 'billid,format,format',
	);
}

sub action_connect
{
	my $self = shift;
	die "Can't connect - no destinationid" unless $self->{destinationid};
	my $msgid = $self->yate->generate_id;
	$responses{$msgid} = $self;
	$self->yate->message('chan.connect', undef, $msgid,
		id => $self->{id},
		targetid => $self->{destinationid},
		billid => $self->{billid},
	);
}

sub action_checknum
{
	my $self = shift;
	warn "'checknum' action is called, but 'numvalidator' helper is not defined" unless $self->{numvalidator};
	my $ev = $self->{numvalidator} ? $self->{numvalidator}->($self->{collected}) : undef;
	$self->enqueue_event($ev) if $ev;
}

sub action_drop
{
	my $self = shift;
	unless($self->{destinationid}) {
		warn "Nothing to drop";
		return;
	}
	$self->yate->message('call.drop', undef, undef,
#		id => $self->{destinationid},
		id => $self->{slavedumb},
	);
	delete $registry{delete $self->{destinationid}};
	delete $registry{delete $self->{slavedumb}};
}

sub action_suicide
{
	my $self = shift;
	$self->destruct;
}

# === === ===

sub get_calls_list
{
	my(%found, @calls);
	foreach my $k(keys %registry) {
		my $o = $registry{$k};
		next if $found{"$o"};

		++$found{"$o"};
		push @calls, $o;
	}
	return \@calls;
}

sub shutdown_all
{
	foreach my $o(@{ get_calls_list() }) {
		$o->destruct;
	}
}


package Yate::IVR;
use strict;
use warnings;
use Carp;

our %ivrs;
our @callbacks;
our $count_all = 0;

sub new
{
	my $class = shift;
	my $table = shift;
	return bless { table => $table, @_ }, $class;
}

sub table { return shift->{table} }

sub init
{
	my($yate) = @_;
	$yate->setlocal(reenter => 'true');
	$yate->setlocal(selfwatch  => 'true');
	$yate->install('call.route', \&_call_route_handler, 30);
	$yate->install_watcher('call.execute', _make_handler(\&Yate::IVR::Call::set_dumb));
	$yate->install('chan.hangup', _make_handler(\&Yate::IVR::Call::disconnected));
	$yate->install('chan.dtmf', _make_handler(\&Yate::IVR::Call::dtmf));
	$yate->install('chan.notify', _make_handler(\&Yate::IVR::Call::notify));
	$yate->install('call.ringing', _make_handler(\&Yate::IVR::Call::ringing));
	$yate->install_watcher('call.answered', _make_handler(\&Yate::IVR::Call::answered));
	$yate->install('chan.replaced', _make_handler(\&Yate::IVR::Call::replace_chan));
	$yate->install_incoming('call.execute', \&_call_execute_result);
	$yate->install_incoming('chan.connect', \&_chan_connect_result);
	$yate->install('engine.timer', \&_broadcast_engine_timer);
	$yate->install('engine.status', \&_engine_status_handler, 150);
}

sub add
{
	my($num, $ivr) = @_;
	croak 'Usage: Yate::IVR::add($num => Yate::IVR->new(params) or Yate::IVR::add($num => $table)' if(@_ != 2 or !$num or ref($num) or !ref($ivr));
	$ivr = __PACKAGE__->new($ivr) unless UNIVERSAL::can($ivr, 'isa') && $ivr->isa(__PACKAGE__);
	%ivrs = (%ivrs, $num => $ivr);
}

sub flush
{
	%ivrs = ();
}

sub callback
{
	my($cb) = @_;
	if(!@callbacks || $cb != $callbacks[$#callbacks]) {
		push @callbacks, $cb;
	}
}

sub _make_handler
{
	my($fn)= @_;
	return sub {
		my $m = shift;
#$m->dumpmsg("msg");
		my $call = Yate::IVR::Call->find($m);
		if($call) {
#			$m->dumpmsg("Found call $call");
			$call->$fn($m);
		}
		return undef;
	};
}

sub _call_route_handler
{
	my $m = shift;
	my $called = $m->param('called');
	my $table = $ivrs{$called};
	return undef unless $table;
	Yate::IVR::Call->new($m, $called, $table);
	$m->param('autoring', 'false');
	$m->param('tonedetect_in', 'true');
	++$count_all;
	return 'dumb/';
}

sub _engine_status_handler
{
	my $msg = shift;
	my @format = qw( name id caller state );
	my $name = $0;
	$name =~ s#.*/##;
	$name =~ s/\.pl$//;
	my $mystatus = '';
	if($name eq ($msg->param('module') || $name)) {
		$mystatus = "name=$name,type=ext,format=".join('|', map({ucfirst($_)} @format)).";";
		$mystatus .= "calls=$count_all,ivrs=".scalar(keys %ivrs).",registry=".scalar(keys %Yate::IVR::Call::registry).",responses=".scalar(keys %Yate::IVR::Call::responses);
		if(($msg->param('details')||'') ne 'false') {
			my $calls = Yate::IVR::Call::get_calls_list();
			$mystatus .=",active=".scalar(@$calls);
			for(my $i = 0; $i < @$calls; ++$i) {
				my $s = $calls->[$i]->status;
				$mystatus .= $i ? ',' : ';';
				$mystatus .= "$i=".join('|', map({ defined($s->{$_}) ? $s->{$_} : '-' } @format));
			}
		}
		$mystatus .= "\r\n";
	}
	return ['false', $msg->header('retvalue').$mystatus];
}

sub _call_execute_result
{
	my $msg = shift;
	my $call = delete $Yate::IVR::Call::responses{$msg->header('id')} || return;
	$call->set_slave($msg);
}

sub _chan_connect_result
{
	my $msg = shift;
	my $call = delete $Yate::IVR::Call::responses{$msg->header('id')} || return;
	$call->connected($msg);
}

sub _broadcast_engine_timer
{
	my $m = shift; local $_;
	my %seen;
	my @bc;
	foreach my $obj(values %Yate::IVR::Call::registry) {
		next if !$obj || $seen{$obj}++;
		push @bc, $obj;
	}
	$_->timer($m) foreach @bc;
#print "REG: ".join(', ', sort keys %Yate::IVR::Call::registry)."\n";
	my $pcb = 0;
	while(my $cb = shift @callbacks) {
		last if $cb == $pcb;
		push @callbacks, $cb if $cb->();
	}
}


package main;
use strict;
use warnings;
use lib '.';
use Yate;
use Dyatel::ExtConfig;
use Data::Dumper;


$|=1;

my $table1 = [
	[ 'start', 'enter', 'answer', 'answered' ],
	[ 'answered', 'enter', 'playfile /home/vir/menu.au', 'playing' ],
	[ 'playing', 'finished', 'timer 5', undef ],
	[ 'playing', 'timeout', 'originate 247', 'switching' ],
	[ 'playing', 'dtmf_1', 'originate 266', 'switching' ],
	[ 'playing', 'dtmf_2', 'originate 262', 'switching' ],
	[ 'playing', 'dtmf_3', 'originate 268', 'switching' ],
	[ 'playing', 'dtmf_9', 'switch 851', undef ],
	[ 'playing', 'dtmf_0', 'switch 887', 'finish' ],
	[ 'switching', 'enter', ['playfile -', 'timer 60'], undef ],
	[ 'switching', 'timeout', 'drop', 'answered' ],
	[ 'switching', 'dtmf', 'drop', 'answered' ],
	[ 'switching', 'ringing', 'playtone ring', 'switching' ],
	[ 'switching', 'answered', 'connect', 'finish' ],
	[ 'switching', 'hangup', 'drop', 'answered' ],
	[ 'switching', 'disconnect', 'drop', 'finish' ],
	[ 'finish', 'enter', 'suicide', 'finish' ], # just in case
];

my $table2 = [
	[ 'start', 'enter', ['flush', 'answer', 'timer 15'], 'prompt' ],
	[ 'prompt', 'enter', 'playfile /home/vir/disa.au', 'firstdigit' ],
	[ 'firstdigit', 'default', undef, 'error' ],
	[ 'firstdigit', 'dtmf_1', 'collect 1', 'second' ],
	[ 'firstdigit', 'dtmf_2', 'collect 2', 'second' ],
	[ 'firstdigit', 'dtmf_3', 'collect 3', 'second' ],
	[ 'second', 'dtmf', 'collect', 'third' ],
	[ 'second', 'default', 'suicide', 'second' ],
	[ 'third', 'dtmf', ['collect', 'originate'], 'switching' ],
	[ 'switching', 'enter', ['playfile -', 'timer 60'], undef ],
	[ 'switching', 'timeout', 'drop', 'prompt' ],
	[ 'switching', 'dtmf', 'drop', 'prompt' ],
	[ 'switching', 'ringing', 'playtone ring', 'switching' ],
	[ 'switching', 'answered', 'connect', 'finish' ],
	[ 'switching', 'hangup', 'drop', 'prompt' ],
	[ 'switching', 'disconnect', 'drop', 'finish' ],
	[ 'finish', 'enter', 'suicide', undef ],
	[ 'error', 'enter', 'switch 222', undef ],
	[ undef, 'finished', undef, undef ], # ignore plyback finish just to skip 'default' in every state
	[ undef, 'answered', undef, undef ],
	[ undef, 'timeout', undef, 'error' ],
];

my $table3 = [
	[ 'start', 'enter', ['flush', 'answer', 'timer 15'], 'prompt' ],
	[ 'prompt', 'enter', 'playfile /home/vir/disa.au', 'firstdigit' ],
	[ 'firstdigit', 'default', undef, 'error' ],
	[ 'firstdigit', 'dtmf_1', 'collect 1', 'second' ],
	[ 'firstdigit', 'dtmf_2', 'collect 2', 'second' ],
	[ 'firstdigit', 'dtmf_3', 'collect 3', 'second' ],
	[ 'second', 'dtmf', 'collect', 'third' ],
	[ 'second', 'default', 'suicide', 'second' ],
	[ 'third', 'dtmf', ['collect', 'switch2'], 'finish' ],
	[ 'finish', 'enter', 'suicide', undef ],
	[ 'error', 'enter', 'switch 222', undef ],
	[ undef, 'finished', undef, undef ], # ignore plyback finish just to skip 'default' in every state
	[ undef, 'answered', undef, undef ],
	[ undef, 'timeout', undef, 'error' ],
];

my $conf = Dyatel::ExtConfig::load()->{Model}{Yate}{extmodule};
my $dbh = Dyatel::ExtConfig::dbh();
$dbh->do('LISTEN ivr');

my $yate = new Yate(Debug=>0);
print "Connecting to Yate server at $conf->{address}:$conf->{port}\n";
$yate->connect($conf->{address}.':'.$conf->{port});
Yate::IVR::init($yate);
#Yate::IVR::add(
#	852 => $table1,
#	851 => $table2,
#);
load_db();
#Yate::IVR::add( 850 => $table3,);

$yate->install('engine.timer', \&check_db);
$SIG{TERM} = sub { Yate::IVR::Call::shutdown_all(); exit 0; };
$SIG{INT} = $SIG{TERM};
$SIG{HUP} = sub { Yate::IVR::callback(\&restart); };
$yate->listen();

sub load_db
{
	Yate::IVR::flush();
	load_aa();
	load_md();
}

sub check_db
{
	my $n = $dbh->func('pg_notifies');
	if($n) {
		my($name, $pid, $payload) = @$n;
		print "Got database notification $name, reloading all IVRs\n";
		Yate::IVR::callback(\&load_db);
	}
}

sub load_aa
{
# Append auto-attendants
	my $sth = $dbh->prepare("SELECT * FROM ivr_aa");
	$sth->execute();
	while(my $h = $sth->fetchrow_hashref) {
		print "Loading autoattendant $h->{num}\n";
		my $table = [
			[ 'start', 'enter', 'answer', 'answered' ],
			[ 'answered', 'enter', 'playfile '.$h->{prompt}, 'playing' ],
			[ 'switching', 'enter', ['playfile -', 'timer 60'], undef ],
			[ 'switching', 'timeout', 'drop', 'answered' ],
			[ 'switching', 'dtmf', 'drop', 'answered' ],
			[ 'switching', 'ringing', 'playtone ring', 'switching' ],
			[ 'switching', 'answered', ['timer 5', 'connect'], 'connecting' ],
			[ 'switching', 'hangup', 'drop', 'answered' ],
			[ 'switching', 'disconnect', 'drop', 'finish' ],
			[ 'connecting', 'connected', 'suicide', 'finish' ],
			[ 'connecting', 'timeout', 'suicide', 'finish' ],
			[ 'finish', 'enter', 'suicide', 'finish' ], # just in case
		];
		push @$table, [ 'playing', 'finished', 'timer 5', undef ] if $h->{timeout};
		push @$table, [ 'playing', 'timeout', 'originate '.$h->{etimeout}, 'switching' ] if defined $h->{etimeout};
		foreach my $digit(qw( 0 1 2 3 4 5 6 7 8 9 star hash )) {
			if(defined $h->{"e$digit"}) {
				if($h->{"e$digit"} =~ /^8/) { # XXX
					push @$table, [ 'playing', 'dtmf_'.$digit, 'switch '.$h->{"e$digit"}, 'finish' ] 
				} else {
					push @$table, [ 'playing', 'dtmf_'.$digit, 'originate '.$h->{"e$digit"}, 'switching' ] 
				}
			}
		}
		Yate::IVR::add($h->{num} => $table);
	}
}

sub load_md
{
# Append mini auto-attendants (internal number switch)
	my $sth = $dbh->prepare("SELECT * FROM ivr_minidisa");
	$sth->execute();
	while(my $h = $sth->fetchrow_hashref) {
		print "Loading minidisa $h->{num}\n";
		my $table = [
			[ undef, 'finished', undef, undef ], # ignore plyback finish just to skip 'default' in every state
			[ undef, 'timeout', undef, 'error' ],
			[ 'start', 'enter', ['flush', 'answer', 'timer '.$h->{timeout}], 'prompt' ],
			[ 'prompt', 'enter', 'playfile '.$h->{prompt}, 'digit' ],
			[ 'finish', 'enter', 'suicide', undef ],
		];
		if($h->{etimeout}) {
			push @$table, [ 'error', 'enter', 'switch '.$h->{etimeout}, undef ];
		} else {
			push @$table, [ 'error', 'enter', undef, 'finish' ];
		}

		push @$table, [ 'digit', 'dtmf', ['collect', 'checknum'], 'digit' ];
		push @$table, [ 'digit', 'invalid', 'flush', 'start' ];
		push @$table, [ 'digit', 'complete', 'switch2', 'finish' ];

		my $firstdigitre;
		if(defined($h->{firstdigit}) && length($h->{firstdigit})) {
			$firstdigitre = "[$h->{firstdigit}]";
		}
		Yate::IVR::add($h->{num} => Yate::IVR->new($table, numvalidator => sub {
			my($num) = @_;
			return 'invalid' if length($num) && $firstdigitre && $num !~ /$firstdigitre/;
			return 'invalid' if length($num) > $h->{numlen};
			my($count, $type) = $dbh->selectrow_array("SELECT COUNT(*), FIRST(numtype) FROM directory WHERE num LIKE ?", undef, $num.'%');
			return 'invalid' if $count == 0;
			return undef if $count > 1;
			return 'invalid' unless grep { $_ eq $type } qw( user callgrp );
			return 'complete';
		}));
	}
}

sub restart
{
	exec "$0 @ARGV";
}



