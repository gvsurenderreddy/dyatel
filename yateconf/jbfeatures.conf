[general]

account=localdb

; groups_separator: string: Roster item groups list separator
; This parameter is used as groups list separator in messages dispatched by the module
; Two hexadecimal digits can be specified (like 09 for TAB or 20 for SPACE)
; If a longer string is set, only the first character will be handled
; Defaults to comma (,) if missing, empty or invalid
;groups_separator=,

; ignore_invalid_groups: boolean: Ignore group names containing the groups separator
; Roster updates received from users will be refused if a group contains the separator and
;  ignore_invalid_groups is disabled
; This parameter is applied on reload
; Default to yes
;ignore_invalid_groups=yes

; roster_query_hierarchical: boolean: Signal hierarchical result support in
;  user.roster query messages
; A module handling the user.roster query message may set contact's parameters list
;  in each contact parameter instead of adding them to the message
; If enabled the performance will grow but parameter altering in external modules
;  will be impossible
; This parameter is applied on reload
; Defaults to yes
;roster_query_hierarchical=yes


[register]
; This section configures in stream user management (add, change, delete)

; allow_management: boolean: Enable user add/remove
; Defaults to yes
;allow_management=yes

; allow_change: boolean: Enable existing authenticated user to change its password
; Defaults to yes
;allow_change=yes

; allow_unsecure: boolean: Enable user management on unsecure connections
; Defaults to no
;allow_unsecure=no

; url: string: URL to be sent to the user when requesting registration data
;  if in stream registration is not enabled
;url=

; intructions: string: Instructions to be sent with the URL
;intructions=


[vcard]
; User vcard management
get=SELECT vcard_get('${username}')
set=SELECT vcard_set('${username}', '${vcard}')
clear_user=SELECT vcard_del('${username}')


[private_data]
; User private data management
get=SELECT privdata_get('${username}', '${tag}', '${xmlns}')
set=SELECT privdata_set('${username}', '${tag}', '${xmlns}', '${xml}')
clear_user=SELECT privdata_clear('${username}')


[offline_chat]
; Offline messages management

; maxcount: integer: Maximum number of chat messages saved for an user
; This parameter can be used to limit the number of chat messages stored on
;  behalf of an user
; This parameter is applied on reload
; Defaults to 0 (no limit) if missing or invalid
;maxcount=

; expires: integer: The time interval (in minutes) a saved chat message
;  will be kept in the database
; This parameter can be used to clear old messages
; This parameter is applied on reload
; Defaults to 0 (no limit) if missing or invalid
;expires=

expire_query=SELECT offlinechat_expire('${time}')
get=SELECT * FROM offlinechat_get('${username}')
add=SELECT * FROM offlinechat_add('${username}', '${xml}', ${time}, ${maxcount})
clear_user=SELECT offlinechat_del('${username}')



