[general]
; Global module settings that are read only at first initialization

; expires: int: Will execute the engine.timer query only every that many seconds
;expires=30

; stoperror: regexp: Regular expression matching errors that will stop fallback
;stoperror=busy

user.auth=yes
user.register=yes
user.unregister=yes
engine.timer=yes
;call.preroute=no
call.route=yes
call.cdr=yes
linetracker=yes
;fallback=no
;accounts=no
subscriptions=yes
resource.subscribe=yes
user.notify=yes


[default]
; This section holds default settings for each of the following message handlers
; All these settings can be overriden in individual handler sections

;priority=50
account=localdb


[user.auth]
; Query and result name for the user.auth message
; The result must not be empty for password authentication to work
; The designated result field is mandatory in the columns to prevent a
;  configuration error from authorizing everybody. Use something
;  like "SELECT NULL AS password" if you really don't need it ever
query=SELECT password FROM users WHERE id = userid('${username}') AND password IS NOT NULL AND password<>''
result=password


[user.register]
query=SELECT user_register('${username}', '${data}', '${expires}', '${device}', '${driver}${module}', '${ip_transport}', '${ip_host}'::INET, ${ip_port});


[user.unregister]
query=SELECT user_unregister('${username}', '${data}');


[engine.timer]
; Query for the timer message that expires registrations
; Also look at the expires setting in section [general]
query=SELECT * FROM regs_expired_list();
unregister_expired=yes


[call.preroute]
;query=
;priority=120


[call.route]
query=SELECT * FROM route_master('${$hstore}');
result=location
;priority=120
namevaluepairs=yes


[call.cdr]
; critical: boolean: Reject all registrations and routing if query fails
critical=no
initquery=UPDATE cdr SET ended=true WHERE ended IS NULL OR NOT ended
cdr_initialize=INSERT INTO cdr(ts, chan, address, direction, billid, caller, called, duration, billtime, ringtime, status, reason, ended) VALUES(TIMESTAMP 'EPOCH' + INTERVAL '${time} s', '${chan}', '${address}', '${direction}', '${billid}', '${caller}', '${called}', INTERVAL '${duration} s', INTERVAL '${billtime} s', INTERVAL '${ringtime} s', '${status}', '${reason}', false)
cdr_update=UPDATE cdr SET address='${address}', direction='${direction}', billid='${billid}', caller='${caller}', called='${called}', duration=INTERVAL '${duration} s', billtime=INTERVAL '${billtime} s', ringtime=INTERVAL '${ringtime} s', status='${status}', reason='${reason}' WHERE chan='${chan}' AND ts=TIMESTAMP 'EPOCH' + INTERVAL '${time} s'
cdr_finalize=UPDATE cdr SET address='${address}', direction='${direction}', billid='${billid}', caller='${caller}', called='${called}', duration=INTERVAL '${duration} s', billtime=INTERVAL '${billtime} s', ringtime=INTERVAL '${ringtime} s', status='${status}', reason='${reason}', ended=true WHERE chan='${chan}' AND ts=TIMESTAMP 'EPOCH' + INTERVAL '${time} s'




[linetracker]
; critical: boolean: Reject all registrations and routing if query fails
;critical=no
initquery=SELECT linetracker_flush()
cdr_initialize=SELECT linetracker_ini('${$hstore}')
cdr_update=SELECT linetracker_upd('${$hstore}')
cdr_finalize=SELECT linetracker_fin('${$hstore}')


[accounts]
; Queries for registering as client to other servers

; query executed only once to create client registrations at startup
;initquery=SELECT account,protocol,username,password,server FROM accounts WHERE enabled IS TRUE

; poll on timer to update registrations if database was changed externally
;timerquery=BEGIN; \
; SELECT (CASE WHEN enabled IS FALSE THEN 'logout' ELSE 'login' END) AS operation,\
; account,protocol,username,password,server FROM accounts WHERE modified IS TRUE; \
; UPDATE accounts SET modified=FALSE; \
; COMMIT

; update account status after receiving an user.notify
;statusquery=UPDATE accounts SET status='${status}' WHERE account='${internalaccount}'


[resource.subscribe]
subscribe_subscribe=SELECT * FROM subscriptions_subscribe('${notifier}','${event}','${subscriber}','${data}','${notifyto}','${expires} s'::INTERVAL) as t(notifier text,data text,subscriber text,event text,notifyto text,notifyseq int8)
subscribe_unsubscribe=SELECT * FROM subscriptions_unsubscribe('${notifier}','${event}','${subscriber}') 
subscribe_notify=SELECT * FROM subscriptions_notify('${notifier}','${event}') as t(notifier text,data text,subscriber text,event text,notifyto text,notifyseq int8)
subscribe_expire=SELECT * FROM subscriptions_expires() AS t(notifier text,data text,subscriber text,event text,notifyto text,notifyseq int8)




